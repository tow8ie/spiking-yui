{
  "name": "yui-lint",
  "description": "Default JSlint rules used by YUI in it's various packages",
  "version": "0.0.1",
  "main": "./yui-lint.js",
  "readme": "YUI JSLint Default Options\n==========================\n\nThe YUI team always strives to make our files pass [JSLint](http://www.jslint.com/lint.html#options). Even\nif we don't always personally agree with these rules. Crockford \nenforces these rules for a good reason. When working with a large\ncode base with hundreds, sometimes thousands of developers a strict\nrules set is a valuable development tool.\n\nEvery application that YUI creates to aid in development will follow\nby all 5 of the below lists.\n\nPreferred List\n--------------\n\nThe `preferred list` is the list that will think is the best to follow for our\ncode now and in the future. These are limited to very few mainly language specific\nand our \"predefined globals\" list. With only 1 real `rule` that we turn off.\n\n`nomen` is the only rule we disagree with. YUI coding standards are to prefix all\n`private` and `protected` methods and properties with an underbar (`_`) for a few reasons.\n\n* It's very easy to tell at a glace\n* When inspecting, these properties will group at the top/bottom of the list\n* It's standardized, no API doc lookups to tell if you should use it\n\n\nOptional List\n-------------\n\nThe `optional list` is the list that contains a few options that we would really like\nto remove from our code base, but due to it's size that's a little difficult to do\nall at once. Eventually, these will be removed and we will not use these options.\n\n\nDefault List\n------------\n\nThe `default list` is the combination of the `preferred` and `default` lists. If\nwe have a tool that provides lint (shell script, builder, etc) they should have \nconfig options to choose from these settings.\n\nStrict List\n-----------\n\nWe would however prefer that all scripts pass with no options set.\n\nSpecial\n-------\n\n**The special list contains options that should never be used file wide.**\n\nThey should only be added at the method level with a comment that explains why they\nare needed.\n\nFor example, we use a *whitelist* approach to filtering an `Object` for performance\nin several places. In this case, we skip the `hasOwnProperty` check when iterating\nthat object. In that case the developer should add the `/*jslint forin: true */` comment\nonly inside the function that they are calling the offending code..\n\n\n",
  "_id": "yui-lint@0.0.1",
  "dist": {
    "shasum": "607100605af10cf0d88df89613f4d8cb960ce695"
  },
  "_from": "yui-lint@*"
}
